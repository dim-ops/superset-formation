# Configuration Superset avec image personnalisée
image:
  repository: dimproject/superset-learning
  tag: report
  pullPolicy: IfNotPresent

# Configuration du service pour Minikube
service:
  type: NodePort
  port: 8088
  nodePort:
    http: 30088
  annotations: {}

# Configuration des réplicas
replicaCount: 1

# Variables d'environnement
# envFromSecret: superset-env-secret  # Commenté car le secret n'existe pas
envFromSecrets: []

# Configuration de la base de données interne
postgresql:
  enabled: true  # PostgreSQL intégré pour Superset
  auth:
    postgresPassword: "superset123"
    username: "superset"
    password: "superset123"
    database: "superset"
  primary:
    persistence:
      enabled: true
      size: 8Gi

# Configuration de l'initialisation avec drivers
init:
  adminUser:
    username: admin
    firstname: Admin
    lastname: User
    email: admin@superset.com
    password: FormationSupersetAdmin002
  createAdmin: true
  initContainers:
    - name: wait-for-postgres
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: "{{ tpl .Values.envFromSecret . }}"
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
    - name: config-substitution
      image: alpine:latest
      command: ['/bin/sh', '-c']
      args:
        - |
          apk add --no-cache gettext
          envsubst < /tmp/template/import_datasources.yaml > /tmp/output/import_datasources.yaml
      env:
        - name: SQLSERVER_USERNAME
          valueFrom:
            secretKeyRef:
              name: sqlserver-credentials
              key: username
        - name: SQLSERVER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sqlserver-credentials
              key: password
        - name: POSTGRESQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: username
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: password
        - name: ORACLE_USERNAME
          valueFrom:
            secretKeyRef:
              name: oracle-credentials
              key: username
        - name: ORACLE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: oracle-credentials
              key: password
      volumeMounts:
        - name: config-template
          mountPath: /tmp/template
        - name: config-output
          mountPath: /tmp/output

supersetNode:
  resources:
    requests:
     cpu: 200m
     memory: 256Mi

supersetWorker:
  resources:
    requests:
     cpu: 200m
     memory: 2Gi

supersetCeleryBeat:
  enabled: true
  resources:
    requests:
     cpu: 200m
     memory: 2Gi

# Configuration personnalisée
configOverrides:
  superset_config.py: |
    import os
    import sys
    import oracledb
    oracledb.version = "8.3.0"
    sys.modules["cx_Oracle"] = oracledb
    import cx_Oracle
    from superset.security import SupersetSecurityManager
    from flask_appbuilder.security.manager import AUTH_DB,AUTH_LDAP
    from custom_security_manager import CustomSecurityManager
    from celery.schedules import crontab

    AUTH_TYPE = AUTH_LDAP
    AUTH_LDAP_SERVER = "ldap://openldap.ldap.svc.cluster.local:389"
    AUTH_LDAP_USE_TLS = False

    # registration configs
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = "Gamma"
    AUTH_LDAP_FIRSTNAME_FIELD = "givenName"
    AUTH_LDAP_LASTNAME_FIELD = "sn"
    AUTH_LDAP_EMAIL_FIELD = "mail"

    # search configs
    AUTH_LDAP_SEARCH = "ou=users,dc=example,dc=org"
    AUTH_LDAP_UID_FIELD = "uid"
    AUTH_LDAP_BIND_USER = "cn=admin,dc=example,dc=org"
    AUTH_LDAP_BIND_PASSWORD = "Not@SecurePassw0rd"

    AUTH_ROLES_MAPPING = {
      "superset_admin": ["Admin"],
      "superset_user": ["Gamma", "Alpha"],
    }

    # Utilise l'attribut description au lieu de memberOf
    AUTH_LDAP_GROUP_FIELD = "description"
    AUTH_ROLES_SYNC_AT_LOGIN = True
    PERMANENT_SESSION_LIFETIME = 1800

    CUSTOM_SECURITY_MANAGER = CustomSecurityManager

    # Configuration de base
    SECRET_KEY = os.environ.get('SUPERSET_SECRET_KEY', 'your-secret-key-change-in-production')

    POSTGRESQL_SUPERSET_USERNAME = os.getenv('POSTGRESQL_SUPERSET_USERNAME')
    POSTGRESQL_SUPERSET_PASSWORD = os.getenv('POSTGRESQL_SUPERSET_PASSWORD')

    # Configuration de la base de données Superset avec variables d'environnement
    SQLALCHEMY_DATABASE_URI = f'postgresql://{POSTGRESQL_SUPERSET_USERNAME}:{POSTGRESQL_SUPERSET_PASSWORD}@superset-postgresql:5432/superset'

    FEATURE_FLAGS = {
      "ALERT_REPORTS": True
    }

    REDIS_HOST = "superset-redis-headless"
    REDIS_PORT = "6379"

    # Configuration Celery
    class CeleryConfig:
        broker_url = f"redis://{REDIS_HOST}:{REDIS_PORT}/0"
        imports = (
            "superset.sql_lab",
            "superset.tasks.scheduler",
        )
        result_backend = f"redis://{REDIS_HOST}:{REDIS_PORT}/0"
        worker_prefetch_multiplier = 10
        task_acks_late = True
        task_annotations = {
            "sql_lab.get_sql_results": {
                "rate_limit": "100/s",
            },
        }
        beat_schedule = {
            "reports.scheduler": {
                "task": "reports.scheduler",
                "schedule": crontab(minute="*/10"),
            },
            "reports.prune_log": {
                "task": "reports.prune_log",
                "schedule": crontab(minute=0, hour=2),
            },
        }
    CELERY_CONFIG = CeleryConfig

    ALERT_REPORTS_NOTIFICATION_DRY_RUN = False

    SCREENSHOT_LOCATE_WAIT = 100
    SCREENSHOT_LOAD_WAIT = 600

    # Configuration WebDriver pour Chrome (plus stable que Firefox)
    WEBDRIVER_TYPE = "chrome"
    WEBDRIVER_OPTION_ARGS = [
      "--force-device-scale-factor=2.0",
      "--high-dpi-support=2.0",
      "--headless",
      "--disable-gpu",
      "--disable-dev-shm-usage",
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-extensions",
    ]

    # Configuration Email
    SMTP_HOST = "email-smtp.us-east-1.amazonaws.com"
    SMTP_PORT = 2587
    SMTP_STARTTLS = True
    SMTP_SSL_SERVER_AUTH = True
    SMTP_SSL = False
    SMTP_USER = ""
    SMTP_PASSWORD = ""
    SMTP_MAIL_FROM = ""
    EMAIL_REPORTS_SUBJECT_PREFIX = "[Superset] "

    # URLs
    WEBDRIVER_BASEURL = "http://superset.superset.svc.cluster.local:8088"
    WEBDRIVER_BASEURL_USER_FRIENDLY = "http://superset.superset.svc.cluster.local:8088"

# Configuration du secret pour les variables d'environnement
extraSecretEnv:
  SUPERSET_SECRET_KEY: your-secret-key-change-in-production

# Configuration Ingress (désactivé par défaut)
ingress:
  enabled: false

serviceAccount:
  create: false
  name: superset

extraVolumes:
  - name: config-template
    configMap:
      name: superset-datasource-template
  - name: config-output
    emptyDir: {}

extraVolumeMounts:
  - name: config-output
    mountPath: /app/configs

extraEnvRaw:
  - name: SQLSERVER_USERNAME
    valueFrom:
      secretKeyRef:
        name: sqlserver-credentials
        key: username
  - name: SQLSERVER_PASSWORD
    valueFrom:
      secretKeyRef:
        name: sqlserver-credentials
        key: password
  - name: POSTGRESQL_USERNAME
    valueFrom:
      secretKeyRef:
        name: postgresql-credentials
        key: username
  - name: POSTGRESQL_PASSWORD
    valueFrom:
      secretKeyRef:
        name: postgresql-credentials
        key: password
  - name: ORACLE_USERNAME
    valueFrom:
      secretKeyRef:
        name: oracle-credentials
        key: username
  - name: ORACLE_PASSWORD
    valueFrom:
      secretKeyRef:
        name: oracle-credentials
        key: password
  - name: POSTGRESQL_SUPERSET_USERNAME
    valueFrom:
      secretKeyRef:
        name: postgresql-superset-credentials
        key: username
  - name: POSTGRESQL_SUPERSET_PASSWORD
    valueFrom:
      secretKeyRef:
        name: postgresql-superset-credentials
        key: password

extraConfigs: {}


