# Configuration Superset avec image personnalisée
image:
  repository: superset-custom
  tag: 5.0.0
  pullPolicy: IfNotPresent

# Configuration du service pour Minikube
service:
  type: NodePort
  port: 8088
  nodePort:
    http: 30088
  annotations: {}

# Configuration des réplicas
replicaCount: 1

# Variables d'environnement
# envFromSecret: superset-env-secret  # Commenté car le secret n'existe pas
envFromSecrets: []

# Configuration de la base de données interne
postgresql:
  enabled: true  # PostgreSQL intégré pour Superset
  auth:
    postgresPassword: "superset123"
    username: "superset"
    password: "superset123"
    database: "superset"
  primary:
    persistence:
      enabled: true
      size: 8Gi

# Configuration de l'initialisation avec drivers
init:
  adminUser:
    username: admin
    firstname: Admin
    lastname: User
    email: admin@superset.com
    password: admin
  createAdmin: true
  initContainers:
    - name: wait-for-postgres
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: "{{ tpl .Values.envFromSecret . }}"
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
    - name: config-substitution
      image: alpine:latest
      command: ['/bin/sh', '-c']
      args:
        - |
          apk add --no-cache gettext
          envsubst < /tmp/template/import_datasources.yaml > /tmp/output/import_datasources.yaml
      env:
        - name: SQLSERVER_USERNAME
          valueFrom:
            secretKeyRef:
              name: sqlserver-credentials
              key: username
        - name: SQLSERVER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sqlserver-credentials
              key: password
        - name: POSTGRESQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: username
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: password
        - name: ORACLE_USERNAME
          valueFrom:
            secretKeyRef:
              name: oracle-credentials
              key: username
        - name: ORACLE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: oracle-credentials
              key: password
      volumeMounts:
        - name: config-template
          mountPath: /tmp/template
        - name: config-output
          mountPath: /tmp/output

supersetNode:
  resources:
    requests:
     cpu: 200m
     memory: 256Mi

supersetWorker:
  resources:
    requests:
     cpu: 200m
     memory: 2Gi

supersetCeleryBeat:
  enabled: true
  resources:
    requests:
     cpu: 200m
     memory: 2Gi

# Configuration personnalisée
configOverrides:
  superset_config.py: |
    import os
    import sys
    import oracledb
    oracledb.version = "8.3.0"
    sys.modules["cx_Oracle"] = oracledb
    import cx_Oracle
    from celery.schedules import crontab

    # Configuration de base
    SECRET_KEY = os.environ.get('SUPERSET_SECRET_KEY', 'your-secret-key-change-in-production')

    # Configuration de la base de données Superset (PostgreSQL intégré)
    SQLALCHEMY_DATABASE_URI = 'postgresql://superset:superset123@superset-postgresql:5432/superset'

    # Configuration des drivers de base de données
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Configuration Redis pour le cache (si activé)
    CACHE_CONFIG = {
        'CACHE_TYPE': 'RedisCache',
        'CACHE_DEFAULT_TIMEOUT': 300,
        'CACHE_KEY_PREFIX': 'superset_',
        'CACHE_REDIS_HOST': 'superset-redis-headless',
        'CACHE_REDIS_PORT': 6379,
        'CACHE_REDIS_DB': 1,
        'CACHE_REDIS_URL': 'redis://superset-redis-headless:6379/1'
    }

    # Configuration Celery
    CELERY_CONFIG = {
      'broker_url': 'redis://superset-redis-headless:6379/0',
      'imports': ['superset.sql_lab', 'superset.tasks.scheduler'],
      'result_backend': 'redis://superset-redis-headless:6379/0',
      'worker_prefetch_multiplier': 1,
      'task_acks_late': True,
      'worker_pool': 'solo',  # Mode solo = pas de processus fork
      'worker_concurrency': 1,  # 1 seule tâche à la fois
      'task_soft_time_limit': 300,
      'task_time_limit': 600,
      'broker_connection_retry_on_startup': True,  # Fix pour le warning
      'beat_schedule': {
          "reports.scheduler": {
            "task": "reports.scheduler",
            "schedule": crontab(minute="*/10"),  # Toutes les 10 minutes
          },
          "reports.prune_log": {
            "task": "reports.prune_log",
            "schedule": crontab(minute=0, hour=2),
          },
      }
    }

    FEATURE_FLAGS = {
      "ALERT_REPORTS": True
    }

    # Configuration optimisée pour les captures d'écran avec Chrome
    SCREENSHOT_LOCATE_WAIT = 30
    SCREENSHOT_LOAD_WAIT = 120

    # Configuration WebDriver pour Chrome (plus stable que Firefox)
    WEBDRIVER_TYPE = "chrome"
    WEBDRIVER_OPTION_ARGS = [
        "--force-device-scale-factor=1",
        "--high-dpi-support=1",
        "--headless",
        "--disable-gpu",
        "--disable-dev-shm-usage",
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-extensions",
        "--disable-background-timer-throttling",
        "--disable-backgrounding-occluded-windows",
        "--disable-renderer-backgrounding",
        "--window-size=1280,720",
    ]

    # Configuration pour éviter les timeouts
    WEBDRIVER_WINDOW_SIZE = (1280, 720)
    SCREENSHOT_SELENIUM_RETRIES = 3
    SCREENSHOT_SELENIUM_HEADSTART = 3

    # Configuration Email
    SMTP_HOST = "email-smtp.us-east-1.amazonaws.com"
    SMTP_PORT = 25
    SMTP_STARTTLS = True
    SMTP_SSL_SERVER_AUTH = True
    SMTP_SSL = False
    SMTP_USER = "AKIA5FTZEYBYCFCEQJVW"
    SMTP_PASSWORD = "BKvgGPtbPxEzqYMHBm1Maeajf3GQfrTE/9pqdQ0xZvK3"
    SMTP_MAIL_FROM = "report.superset@dimops.com"
    EMAIL_REPORTS_SUBJECT_PREFIX = "[Superset] "

    # URLs
    WEBDRIVER_BASEURL = "http://superset:8088"
    WEBDRIVER_BASEURL_USER_FRIENDLY = "http://localhost:8088"

    # Configuration supplémentaire pour éviter les problèmes de mémoire
    SQLLAB_ASYNC_TIME_LIMIT_SEC = 300
    SQLLAB_TIMEOUT = 300
    SUPERSET_WEBSERVER_TIMEOUT = 300

# Configuration du secret pour les variables d'environnement
extraSecretEnv:
  SUPERSET_SECRET_KEY: your-secret-key-change-in-production

# Configuration Ingress (désactivé par défaut)
ingress:
  enabled: false

serviceAccount:
  create: false
  name: superset

extraVolumes:
  - name: config-template
    configMap:
      name: superset-datasource-template
  - name: config-output
    emptyDir: {}

extraVolumeMounts:
  - name: config-output
    mountPath: /app/configs

extraEnvRaw:
  - name: SQLSERVER_USERNAME
    valueFrom:
      secretKeyRef:
        name: sqlserver-credentials
        key: username
  - name: SQLSERVER_PASSWORD
    valueFrom:
      secretKeyRef:
        name: sqlserver-credentials
        key: password
  - name: POSTGRESQL_USERNAME
    valueFrom:
      secretKeyRef:
        name: postgresql-credentials
        key: username
  - name: POSTGRESQL_PASSWORD
    valueFrom:
      secretKeyRef:
        name: postgresql-credentials
        key: password
  - name: ORACLE_USERNAME
    valueFrom:
      secretKeyRef:
        name: oracle-credentials
        key: username
  - name: ORACLE_PASSWORD
    valueFrom:
      secretKeyRef:
        name: oracle-credentials
        key: password

extraConfigs: {}

extraEnv:
  - name: CELERY_WORKER_MAX_MEMORY_PER_CHILD
    value: "200000"  # 200MB
  - name: CELERY_WORKER_PREFETCH_MULTIPLIER
    value: "1"


