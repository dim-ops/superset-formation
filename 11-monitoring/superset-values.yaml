# Configuration Superset avec image personnalisée
image:
  repository: superset-custom
  tag: 5.0.0
  pullPolicy: IfNotPresent

# Configuration du service pour Minikube
service:
  type: NodePort
  port: 8088
  nodePort:
    http: 30088
  annotations: {}

# Configuration des réplicas
replicaCount: 1

# Variables d'environnement
# envFromSecret: superset-env-secret  # Commenté car le secret n'existe pas
envFromSecrets: []

# Configuration de la base de données interne
postgresql:
  enabled: true  # PostgreSQL intégré pour Superset
  auth:
    postgresPassword: "superset123"
    username: "superset"
    password: "superset123"
    database: "superset"
  primary:
    persistence:
      enabled: true
      size: 8Gi

# Configuration de l'initialisation avec drivers
init:
  adminUser:
    username: admin
    firstname: Admin
    lastname: User
    email: admin@superset.com
    password: admin
  createAdmin: true

# Ressources
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Configuration personnalisée
configOverrides:
  superset_config.py: |
    import os
    import sys
    import oracledb
    oracledb.version = "8.3.0"
    sys.modules["cx_Oracle"] = oracledb
    import cx_Oracle
    from superset.security import SupersetSecurityManager
    from flask_appbuilder.security.manager import AUTH_DB,AUTH_LDAP
    from custom_security_manager import CustomSecurityManager

    import os

    # Configuration StatsD
    STATS_LOGGER = 'statsd'
    STATSD_HOST = 'statsd-exporter-prometheus-statsd-exporter.monitoring.svc.cluster.local'
    STATSD_PORT = 9125
    STATSD_PREFIX = 'superset'

    # Configuration de base Superset
    SECRET_KEY = os.environ.get('SECRET_KEY', 'your-secret-key')
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')

    # Activer les métriques
    from superset.stats_logger import StatsdStatsLogger
    STATS_LOGGER_CLASS = StatsdStatsLogger

    AUTH_TYPE = AUTH_LDAP
    AUTH_LDAP_SERVER = "ldap://openldap.ldap.svc.cluster.local:389"
    AUTH_LDAP_USE_TLS = False

    # registration configs
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = "Gamma"
    AUTH_LDAP_FIRSTNAME_FIELD = "givenName"
    AUTH_LDAP_LASTNAME_FIELD = "sn"
    AUTH_LDAP_EMAIL_FIELD = "mail"

    # search configs
    AUTH_LDAP_SEARCH = "ou=users,dc=example,dc=org"
    AUTH_LDAP_UID_FIELD = "uid"
    AUTH_LDAP_BIND_USER = "cn=admin,dc=example,dc=org"
    AUTH_LDAP_BIND_PASSWORD = "Not@SecurePassw0rd"

    # Solution avec attribut personnalisé sur l'utilisateur
    # Utilisez description ou title pour définir le rôle
    AUTH_ROLES_MAPPING = {
        "superset_admin": ["Admin"],
        "superset_user": ["Gamma", "Alpha"],
    }

    # Utilise l'attribut description au lieu de memberOf
    AUTH_LDAP_GROUP_FIELD = "description"
    AUTH_ROLES_SYNC_AT_LOGIN = True
    PERMANENT_SESSION_LIFETIME = 1800

    CUSTOM_SECURITY_MANAGER = CustomSecurityManager


    # Configuration de base
    SECRET_KEY = os.environ.get('SUPERSET_SECRET_KEY', 'your-secret-key-change-in-production')

    # Configuration de la base de données Superset (PostgreSQL intégré)
    SQLALCHEMY_DATABASE_URI = 'postgresql://superset:superset123@superset-postgresql:5432/superset'

    # Configuration des drivers de base de données
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Configuration Redis pour le cache (si activé)
    CACHE_CONFIG = {
        'CACHE_TYPE': 'RedisCache',
        'CACHE_DEFAULT_TIMEOUT': 300,
        'CACHE_KEY_PREFIX': 'superset_',
        'CACHE_REDIS_HOST': 'superset-redis-headless',
        'CACHE_REDIS_PORT': 6379,
        'CACHE_REDIS_DB': 1,
        'CACHE_REDIS_URL': 'redis://superset-redis-headless:6379/1'
    }

    # Configuration Celery
    CELERY_CONFIG = {
        'broker_url': 'redis://superset-redis-headless:6379/0',
        'imports': ['superset.sql_lab'],
        'result_backend': 'redis://superset-redis-headless:6379/0',
        'worker_prefetch_multiplier': 10,
        'task_acks_late': True,
    }

# Configuration du secret pour les variables d'environnement
extraSecretEnv:
  SUPERSET_SECRET_KEY: your-secret-key-change-in-production

# Configuration Ingress (désactivé par défaut)
ingress:
  enabled: false

extraConfigs:
  import_datasources.yaml: |
    databases:
    - database_name: "Production SQL Server"
      sqlalchemy_uri: "mssql+pymssql://sa:YourStrong!Passw0rd@sqlserver-service.default.svc.cluster.local:1433"
      allow_file_upload: true
      allow_ctas: true
      allow_cvas: true
      allow_run_async: true
      expose_in_sqllab: true
      tables: []

    - database_name: "PostgreSQL Analytics"
      sqlalchemy_uri: "postgresql://superset_user:superset123@postgresql.default.svc.cluster.local:5432/superset_db"
      allow_file_upload: true
      allow_ctas: true
      allow_cvas: true
      allow_run_async: true
      expose_in_sqllab: true
      tables: []

    - database_name: "Oracle Analytics"
      sqlalchemy_uri: "oracle+cx_oracle://admin:admindimops@database-1.c92oy2osmi5g.us-east-1.rds.amazonaws.com:1521/?service_name=ORCL"
      allow_file_upload: true
      allow_ctas: true
      allow_cvas: true
      allow_run_async: true
      expose_in_sqllab: true
      tables: []
